{
  "name": "diptables",
  "description": "An iptables cookbook for Chef!",
  "long_description": "Diptables cookbook\n==================\n\nA Chef cookbook with to manage iptables rules and policies.\n\nUsage\n=====\n\nThis cookbook rebuilds the entire set of rules at every Chef-client run, thus\nmaking it trivial to keep the iptables configuration up-to-date.\n\nIt also makes it easy to create iptables rules using Chef search queries. For\nexample, you can very simply create a rule telling your database server to let\nall your backend servers connect to it.\n\nYou simply need to create all the rules and policies using the resources\nprovided by this cookbook (see below), and then apply them using with a\n`diptables_apply` resource or alternatively by including `diptables::default`.\nNote that if you do not do either of these things, this cookbook defines a\nhandler that will apply the rules for you at the end of the run (but that's not\nrecommended, as you won't benefit from your reporting handlers if there's an\nerror applying rules that way).\n\nRequirements\n============\n\nThis cookbook is fully tested on Ubuntu 12.04, 14.04, CentOS 6.5, and Chef 11\nand 12.\n\nIt should work on any platform that supports `iptables` though.\n\nResources\n=========\n\n***diptables_rule***\n\nThe most generic resource to define rules. If you want to apply TCP or UDP\nrules, you might want to have a look at `diptables_tcp_udp_rule` below that\nbrings so syntactic sugar on top of this `diptables_rule`.\n\nActions:\n\n| Action | Description |\n|--------|-------------|\n| `:append` | (_default_) Appends the rule after the other rules already   defined in its chain |\n| `:prepend` | Prepends the rule the front of its chain |\n| `:insert` | Inserts the rule in its chain at the position given by the `index` attribute (see below) |\n| `:add` | (_deprecated_) An alis for `:append` |\n\nAttributes:\n\n| Attribute | Type | Default | Description |\n|-----------|------|---------|-------------|\n| `table` | `String` | `'filter'` | The rule's table |\n| `chain` | `String` | `'INPUT` | The rule's chain |\n| `rule` | `String | Array` | `''` | The rule itself; if it's an array, it will create one `iptables` rule for each item in the array |\n| `jump` | `String | FalseClass` | `ACCEPT` | What to do with the matching packets; can be `false` to omit that part from the generated rule |\n| `comment` | `String | TrueClass | FalseClass` | `true` | A comment for that rule (will appear in the files containing the generated rules); `false` disables this feature, `true` takes the resource's name as comment |\n| `query` | `String | FalseClass` | `false` | A query to fetch `Chef::Node` objects used to generate the rule (see `placeholders` below) |\n| `placeholders` | `Hash` | `{}` | When using the `query` attribute, this defines how to replace placeholders from the `rule`; it should map each placeholder's name to a method name or an attribute path (given as arrrays) used to retrieve the corresponding values from the `Chef::Node` objects returned by the query |\n| `same_environment` | `TrueClass | FalseClass` | `false` | Restricts the `query` to return only nodes from the same Chef environment |\n| `index` | `Fixnum` | `-1` | The rule's index in its chain (only makes sense with the `:insert` action) |\n\nA few examples (note that all these would be simpler with `diptables_tcp_udp_rule` resources instead):\n\n    # Disallow SSH\n    diptables_rule 'ssh' do\n      rule '--proto tcp --dport 22'\n      jump 'REJECT'\n    end\n\n    # Allow HTTP, HTTPS\n    diptables_rule 'http' do\n      rule [ '--proto tcp --dport 80',\n             '--proto tcp --dport 443' ]\n    end\n\n    # Allow backend servers to connect to MySQL (using a node method)\n    diptables_rule 'mysql with node method' do\n      rule '-s %<remote_ip>s --proto tcp --dport 3306'\n      query 'roles:backend-server'\n      placeholders({:remote_ip => 'ipaddress'})\n    end\n\nAnd the same as the above, but using node attributes instead (assuming\n`node['my_company']['network']['internal_ip']` is defined):\n\n    # Allow backend servers to connect to MySQL (using an attribute path)\n    diptables_rule 'mysql with attribute path' do\n      rule '-s %<remote_ip>s --proto tcp --dport 3306'\n      query 'roles:backend-server'\n      placeholders({:remote_ip => ['my_company', 'network', 'internal_ip]})\n    end\n\n***diptables_tcp_udp_rule***\n\nEssentially a wrapper with some syntactic sugar on top of `diptables_rule`.\n\nSame actions as `diptables_rule`.\n\nAttributes:\n\n| Attribute | Type | Default | Description |\n|-----------|------|---------|-------------|\n| `table` | `String` | `'filter'` | The rule's table |\n| `chain` | `String` | `'INPUT`   | The rule's chain |\n| `jump` | `String | FalseClass` | `ACCEPT` | What to do with the matching packets; can be `false` to omit that part from the generated rule |\n| `proto` | `'tcp' | 'udp'` | `'tcp'` | The protocol |\n| `interface` | `String | FalseClass` | `false` | The interface |\n| `dport` | `Fixnum | String | Array | FalseClass` | `false` | The destination port(s); can be a `String` to specify a range - e.g `'9300:9400'`, or an `Array` of `String`s and `Fixnum`s - e.g. `[80, 443, '9200:9400']` - in which case it uses the `multiport` iptables module |\n| `source` | `String | Array | FalseClass` | `false` | One or more source IP(s) (cannot be used together with `source_query` below) |\n| `source_query` | `String | FalseClass` | `false` | A query to fetch the source nodes for that rule |\n| `source_method` | `String | Array` | `'ipaddress'` | A method or attribute path to retrieve the IP address of source nodes |\n| `comment` | `String | TrueClass | FalseClass` | `true` | A comment for that rule (will appear in the files containing the generated rules); `false` disables this feature, `true` takes the resource's name as comment |\n| `same_environment` | `TrueClass | FalseClass` | `false` | Restricts the `query` to return only nodes from the same Chef environment |\n| `index` | `Fixnum` | `-1` | The rule's index in its chain (only makes sense with the `:insert` action) |\n\nThe same examples as above, re-written using `diptables_tcp_udp_rule`s:\n\n    # Disallow SSH\n    diptables_tcp_udp_rule 'ssh' do\n      dport 22\n      jump 'REJECT'\n    end\n\n    # Allow HTTP, HTTPS\n    diptables_tcp_udp_rule 'http' do\n      dport [80, 443]\n    end\n\n    # Allow backend servers to connect to MySQL (using a node method)\n    diptables_tcp_udp_rule 'mysql with node method' do\n      dport 3306\n      source_query 'roles:backend-server'\n    end\n\n    # Allow backend servers to connect to MySQL (using an attribute path)\n    diptables_tcp_udp_rule 'mysql with attribute path' do\n      dport 3306\n      query 'roles:backend-server'\n      source_method ['my_company', 'network', 'internal_ip]\n    end\n\n***diptables_bpf_rule***\n\nAnother wrapper on top of `diptables_rule`; that one allows to create BPF (\"Berkeley Packet Filter\") rules\nusing the same syntax as for `tcpdump` filters.\n\nThis one is very specific, and you probably won't use it, so just a couple of\nexamples here:\n\n    # drops all IPv6 traffic\n    diptables_bpf_rule 'drop all IPv6 traffic' do\n        tcpdump_rule 'ip6'\n        jump 'DROP'\n    end\n\nA more sophisticated example, that accepts all IP packets where the source and\ndestination IP do not belong to the same `/16` network on `tun0`:\n\n    diptables_bpf_rule 'accept only traffic on the same /16 network' do\n        tcpdump_rule 'ip and ip[12:4] & 0xFFFF0000 = ip[16:4] & 0xFFFF0000'\n        # WARNING: this interface is only used to generate the bytecode, not for the\n        # actual iptables rule!\n        interface 'tun0'\n        additional_rule '-i tun0'\n    end\n\nOf course assumes you have the `bpf` iptables module installed. You also need\nto have `tcpdump` around.\n\nMore docs and example at https://github.com/cloudflare/bpftools\n\n***diptables_policy***\n\nDefines a policy (default action) for a given iptables chain.\n\nActions:\n\n| Action | Description |\n|--------|-------------|\n| `:add` | (_default_) Adds the policy |\n\nAttributes:\n\n| Attribute | Type | Default | Description |\n|-----------|------|---------|-------------|\n| `table` | `String` | `'filter'` | The policy's table |\n| `chain` | `String` | `'INPUT` | The policy's chain |\n| `policy` | `'ACCEPT' | 'DROP'` | none (_required_) | The policy itself |\n\n***diptables_apply***\n\n| Action | Description |\n|--------|-------------|\n| `:apply` | (_default_) Applies the `iptables` configuration as defined so far |\n\nApplies rules and policies defined so far. There *must* be *exactly one*\n`diptables_apply` resource in your Chef-client run, and it *must* be converged\n*after* all your rule and policy resources (if you have more than one, Chef\nwill output an explicit warning).\n\nNote that the `diptables::default` recipe defines such a resource. As mentioned\nabove, if your Chef-client run ends with one or more rule or policy resources\nthat haven't been applied yet, our custom Chef handler will create and converge\na `diptables_apply` resource on the fly, but it is not recommended to rely on\nthis behaviour.\n\nContributing & Feedback\n=======================\n\nAs always, I appreciate bug reports, suggestions, pull requests, feedback...\nFeel free to reach me at <wk8.github@gmail.com>\n\nDevelopment & Testing\n=====================\n\nYou can test this cookbook locally, provided you have a bunch of free software\ninstalled, namely [Vagrant](https://www.vagrantup.com/downloads),\n[Berkshelf](http://berkshelf.com/), [VirtualBox](https://www.virtualbox.org/),\nand a couple of Vagrant plugins:\n[Vagrant-Berkshelf](https://github.com/berkshelf/vagrant-berkshelf) and\n[Vagrant-Omnibus](https://github.com/schisamo/vagrant-omnibus).\n\nThen playing with this cookbook should be as easy as running `bundle install && vagrant up`!\n\nTo run the full test suite across all supported platforms and Chef versions,\nyou need to have [ChefDK](https://downloads.chef.io/chef-dk/) around, and run\n`kitchen test`.\n\nChef-Solo\n=========\n\nAs of version 0.1.5, you can use this cookbook's resources' query abilities as\nlong as you have the [`chef-solo-search` cookbook (by\nedelight)](https://github.com/edelight/chef-solo-search) installed.\n\nPlease note though that the `chef-solo-search` cookbook is deprecated, and you\nshould really consider starting using `chef-zero` instead [as suggested by\n`chef-solo-search`'s author\nhimself.](https://www.chef.io/blog/2014/06/24/from-solo-to-zero-migrating-to-che\nf-client-local-mode/)\n\nChanges\n=======\n\n* 1.0.0 (Apr 24, 2015)\n    * Added full support for CentOS 6.5\n    * Added `rspec` tests\n    * Added Test-Kitchen tests for all supported platforms and Chef versions\n    * Migrated the applying logic to the `diptables_apply` resource\n\n* 0.2.0 (Mar 1, 2015)\n    * Added the `diptables_bpf_rule` resource\n\n* 0.1.6 (May 6, 2014)\n    * Included Vagrant & Berkshelf for easier development\n\n* 0.1.5 (Apr 26, 2014)\n    * Enabling the use of the search queries with Chef-Solo if the `chef-solo-search` cookbook is installed\n    * Enforcing that the default recipe runs after LWRPs have been defined in a smoother way\n\n* 0.1.4 (Nov 6, 2013)\n    * Sorting the query's results to avoid reloading iptables unnecessarily\n\n* 0.1.3 (Oct 8, 2013)\n    * Forcing the flush of the test chain, fixing a possible bug when a previous Chef-client run has been killed half-way through\n\n* 0.1.2 (Sep 23, 2013)\n    * Forcing the iptables reload action when disabling the `dry_run` mode\n    * Fixing possible name collision\n\n* 0.1.1 (Sep 23, 2013)\n    * Added the `comment` attribute\n\n* 0.1.0 (Sep 11, 2013)\n    * Initial release\n",
  "maintainer": "Jean Rouge",
  "maintainer_email": "jer329@cornell.edu",
  "license": "unlicense",
  "platforms": {

  },
  "dependencies": {
    "chef_handler": ">= 0.0.0"
  },
  "recommendations": {

  },
  "suggestions": {

  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {

  },
  "version": "1.0.0",
  "source_url": "",
  "issues_url": ""
}
